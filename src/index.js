/**
 * Class containing information and logic needed to generate a brief
 * string description of input values.
 */
class Describe {
    constructor(descriptors) {
        this.descriptors = descriptors || [];
    }
    
    /**
     * Internal helper for generating a safe representation of
     * an arbitrary string value. Special characters (including
     * newlines and escape characters) will be escaped and
     * long strings will be truncated.
     */
    safeString(length, value) {
        let i = length - 2;
        let j = 4;
        while(i >= 4) {
            const trunc = (value.length <= i ?
                value : value.slice(0, i - 3) + "..."
            );
            const escaped = JSON.stringify(trunc);
            if(escaped.length <= length) {
                return escaped;
            }
            i -= j;
            j += 2;
        }
        return "";
    }
    
    /**
     * Add a custom descriptor function to be used by `describe`.
     *
     * @param descriptor A function accepting an arbitrary value
     * and returning a brief string description of that value,
     * or a falsey value if it was not applicable and another
     * descriptor should be tried instead.
     */
    addDescriptor(descriptor) {
        this.descriptors.push(descriptor);
    }
    
    /**
     * Get a string briefly describing a value.
     * Custom descriptions can be generated by using the addDescriptor
     * function.
     *
     * @param value The value to describe.
     * @returns A string briefly describing the input value.
     */
    describe(value) {
        for(const descriptor of this.descriptors) {
            const result = descriptor(value);
            if(result) {
                return String(result);
            }
        }
        if(value === undefined) {
            return "undefined";
        }
        else if(value === null) {
            return "null";
        }
        else if(value === false) {
            return "a false boolean value";
        }
        else if(value === true) {
            return "a true boolean value";
        }
        else if(typeof(value) === "number") {
            if(Number.isNaN(value)) {
                return "NaN";
            }
            else if(value === Infinity) {
                return "positive infinity";
            }
            else if(value === -Infinity) {
                return "negative infinity";
            }
            else if(value === 0) {
                return "the number 0";
            }
            else if(Number.isInteger(value)) {
                return "the integer " + String(value);
            }
            else {
                return "the number " + String(value);
            }
        }
        else if(typeof(value) === "bigint") {
            if(value == 0) {
                return "the bigint number 0n";
            }
            else if(value <= Number.MAX_SAFE_INTEGER && value >= -Number.MAX_SAFE_INTEGER) {
                return "the bigint number " + String(value) + "n";
            }
            else {
                const sign = value > 0 ? "positive" : "negative";
                return "a " + sign + " bigint number";
            }
        }
        else if(typeof(value) === "string") {
            if(!value.length) {
                return "an empty string";
            }
            else if(value.length <= 32) {
                const valueString = JSON.stringify(value);
                if(valueString.length <= 48) {
                    return "the string " + valueString;
                }
                else {
                    return "a string";
                }
            }
            else {
                return "a string";
            }
        }
        else if(typeof(value) === "symbol") {
            return String(value.description.slice(0, 60));
        }
        else if(Array.isArray(value)) {
            if(!value.length) {
                return "an empty array";
            }
            else if(value.length === 1) {
                return "an array with 1 element";
            }
            else {
                return "an array with " + String(value.length) + " elements";
            }
        }
        else if(typeof(Set) !== "undefined" && value instanceof Set) {
            if(!value.size) {
                return "an empty set";
            }
            else if(value.size === 1) {
                return "a set with 1 element";
            }
            else {
                return "a set with " + String(value.size) + " elements";
            }
        }
        else if(typeof(Map) !== "undefined" && value instanceof Map) {
            if(!value.size) {
                return "an empty map";
            }
            else if(value.size === 1) {
                return "a map with 1 key";
            }
            else {
                return "a map with " + String(value.size) + " keys";
            }
        }
        else if(typeof(Buffer) !== "undefined" && value instanceof Buffer) {
            if(!value.length) {
                return "an empty buffer";
            }
            else if(value.length === 1) {
                return "a buffer containing 1 byte";
            }
            else {
                return "a buffer containing " + String(value.length) + " bytes";
            }
        }
        else if(typeof(Promise) !== "undefined" && value instanceof Promise) {
            return "a promise";
        }
        else if(typeof(value) === "object") {
            if(value.constructor && value.constructor !== Object) {
                if(value.constructor.name) {
                    const ctorName = this.safeString(36, value.constructor.name);
                    return (ctorName ?
                        "an object instance of " + ctorName :
                        "an object instance"
                    );
                }
                else if(typeof(Symbol) !== "undefined" &&
                    typeof(value[Symbol.iterator]) === "function"
                ) {
                    return "an iterable object";
                }
                else {
                    return "an object";
                }
            }
            else {
                let count = 0;
                for(const key in value) {
                    count += (
                        Object.prototype.hasOwnProperty.call(value, key) ?
                        1 : 0
                    );
                }
                if(count === 0) {
                    return "an empty object";
                }
                else if(count === 1) {
                    return "a plain object with 1 key";
                }
                else {
                    return "a plain object with " + String(count) + " keys";
                }
            }
        }
        else if(typeof(value) === "function") {
            if(value.name) {
                const funcName = this.safeString(40, value.name);
                return (funcName ?
                    "the function " + funcName :
                    "a function"
                );
            }
            else {
                return "an anonymous function";
            }
        }
        else {
            const typeName = this.safeString(32, typeof(value));
            return (typeName ?
                "a value with type " + typeName :
                "a value with an unrecognized type"
            );
        }
    }
}

/**
 * Global default instance of the `Describe` class.
 */
const DefaultDescribe = new Describe();

/**
 * Add a custom descriptor function to be used by `describe`.
 *
 * @param descriptor A function accepting an arbitrary value
 * and returning a brief string description of that value,
 * or a falsey value if it was not applicable and another
 * descriptor should be tried instead.
 */
function addDescriptor(descriptor) {
    DefaultDescribe.addDescriptor(descriptor);
}

/**
 * Get a string briefly describing a value.
 * Custom descriptions can be generated by using the addDescriptor
 * function.
 *
 * @param value The value to describe.
 * @returns A string briefly describing the input value.
 */
function describe(value) {
    return DefaultDescribe.describe(value);
}

module.exports = {
    Describe: Describe,
    DefaultDescribe: DefaultDescribe,
    addDescriptor: addDescriptor,
    describe: describe,
    default: describe,
};
